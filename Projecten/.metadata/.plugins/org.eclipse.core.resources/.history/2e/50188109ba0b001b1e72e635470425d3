package ui;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class InleidingDoorlopenCollectie_start {
	public static void main(String[] args) {
		List<String> woorden = new ArrayList<>();
		woorden.add("Eerste");
		woorden.add("Tweede");
		woorden.add("Derde");
		woorden.add("Eerste");
		woorden.add("Tweede");
		woorden.add("Derde");
		woorden.add("\n");

		/*
		 * Verschillende manieren om een collectie te doorlopen
		 * 
		 * Manier 1: for-lus 
		 * Manier 2: enhanced-for : maakt gebruik van iterator 
		 * Manier 3: iterator : exact hetzelfde als een enhanced-for 
		 * Manier 4: ListIterator
		 * Manier 5: Lambda
		 * 
		 * Enhanced for : kan objecten lezen en werkt niet-geïndexeerd. 
		 * Iterator		: kan objecten lezen en verwijderen en werkt niet-geïndexeerd. 
		 * ListIterator : kan lijsten lezen, verwijderen en aanpassen en werkt niet-geïndexeerd.
		 * 			
		 */

		// Manier 1:
		for (int i = 0; i < woorden.size(); i++)
			System.out.println(woorden.get(i));

		// Manier 2:
		for (String elem : woorden)
			System.out.println(elem);

		// Manier 3:
		Iterator<String> it = woorden.iterator();

		while (it.hasNext())
			System.out.println(it.next());

		
		while (it.hasNext()) {
			String s = it.next();
			if (s.equals("Derde"))
				it.remove();
		}
		
		// Manier 4:

		// Overlopen --gebruik--> enhanced for
		// overlopen en verwijderen --gebruik--> Iterator
		// Overlopen + positie bepalen + toevoegen en verwijderen --gebruik-->
		// ListIterator (enkel bij lijsten)

		// lamba's
		System.out.println("lambda's \n\n");

		woorden.forEach(elem -> System.out.println(elem));
		woorden.forEach(System.out::println);

		// linked list geschikt toevoegen en verwijderen.
		// arraylist is goed om elementen op te zoeken.
	}
}

// array = .length
// lijst = .size
